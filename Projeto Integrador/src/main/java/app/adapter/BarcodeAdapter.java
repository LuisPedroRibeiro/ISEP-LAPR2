package app.adapter;

import app.domain.model.BarcodeExternalModule;
import net.sourceforge.barbecue.Barcode;
import net.sourceforge.barbecue.BarcodeException;
import net.sourceforge.barbecue.BarcodeFactory;
import net.sourceforge.barbecue.BarcodeImageHandler;
import net.sourceforge.barbecue.output.OutputException;

import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;

/**
 * This class allows the communication between barbecue library.
 * This class is not that essential but needs to be created for the System to support other APIs in case if he needs it.
 *
 * @author Miguel Ramos <1201247@isep.ipp.pt>
 */
public class BarcodeAdapter implements BarcodeExternalModule {

    /**
     * An integer that has the first number of a barcode that suggests what are the area of the item.
     */
    private static final int NATIONAL_HEALTH_NUMBER = 3;

    /**
     * An integer to inicialize the counter of the number of Samples.
     */
    private static int numberofSamples = 0;

    /**
     * Method that create and return the barcode generated by the BarbecueAPI (with library methods).
     *
     * @return barcode generated by BarbecueAPI.
     * @throws OutputException Exception because of the output given by barcode.
     * @throws BarcodeException Exception that needs to be throw because of barbecue library
     * @throws IOException Exception because of the input to create a barcode.
     */
    @Override
    public String getBarcode() throws OutputException, BarcodeException, IOException {
        String bar = new DecimalFormat("##0000000000").format(numberofSamples);
        String barA = NATIONAL_HEALTH_NUMBER + bar;
        Barcode bc = BarcodeFactory.createUPCA(barA);
        bc.setPreferredBarHeight(100);
        bc.setBarWidth(2);
        bc.setAlignmentX(0);
        bc.setAlignmentY(0);
        File dir = new File("BarcodeJPEG\\barcode" + numberofSamples + ".jpeg");
        BarcodeImageHandler.saveJPEG(bc,dir);
        increseNumberOfSamples();
        return barA;
    }

    /**
     * Method that increments +1 to numberOfSamples.
     */
    public static void increseNumberOfSamples(){
        numberofSamples++;
    }

    /**
     * Method that return the numberOfSamples.
     *
     * @return The number of Samples.
     */
    public static int getNumberOfSamples(){
        return numberofSamples;
    }

    /**
     * Method that returns the Barcode number of Barcode.
     *
     * @return A String with a Barcode Number.
     */
    public String getBarcodeNumber(){
        String bar = new DecimalFormat("##0000000000").format(numberofSamples-1);
        return NATIONAL_HEALTH_NUMBER+bar;
    }
}